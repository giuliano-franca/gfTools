import math
from maya import cmds
from maya.api import OpenMaya as om2

def stretchyLeg(ikHdle, ikCtrl, pvCtrl, upaxis):
    translateBased = True
    cmpntName = '_'.join(ikCtrl.split('_')[:2])
    ikCtrlPath = om2.MSelectionList().add(ikCtrl).getDagPath(0).fullPathName()
    ikHdlePath = om2.MSelectionList().add(ikHdle).getDagPath(0).fullPathName()
    pvCtrlPath = om2.MSelectionList().add(pvCtrl).getDagPath(0).fullPathName()
    startJoint = cmds.listConnections('%s.startJoint' % ikHdle)
    endEffector = cmds.listConnections('%s.endEffector' % ikHdle)
    endJoint = cmds.listConnections(endEffector, d=False, s=True)[0]
    cmds.select(startJoint, hi=True)
    cmds.select(endJoint, hi=True, d=True)
    cmds.select(endEffector, d=True)
    cmds.select(endJoint, add=True)
    chain = cmds.ls(sl=True)
    midJoint = chain[1]
    cmds.select(cl=True)
    firstPos = cmds.xform(chain[0], q=True, ws=True, rp=True)
    lastPos = cmds.xform(chain[-1], q=True, ws=True, rp=True)
    ikHdlePivot = cmds.listRelatives(ikHdle, p=True)[0]
    if not cmds.objExists('%s_thighPos_srt' % cmpntName):
        thighPos = cmds.group(em=True, n='%s_thighPos_srt' % cmpntName)
        pos = cmds.xform(chain[0], q=True, ws=True, rp=True)
        cmds.xform(thighPos, ws=True, t=(pos[0], pos[1], pos[2]))
    else:
        thighPos = '%s_thighPos_srt' % cmpntName
    if not cmds.objExists('%s_anklePos_srt' % cmpntName):
        anklePos = cmds.group(em=True, n='%s_anklePos_srt' % cmpntName)
        pos = cmds.xform(chain[2], q=True, ws=True, rp=True)
        cmds.xform(anklePos, ws=True, t=(pos[0], pos[1], pos[2]))
    else:
        anklePos = '%s_anklePos_srt' % cmpntName
    if not cmds.objExists('%s_pvPos_srt' % cmpntName):
        pvPos = cmds.group(em=True, n='%s_pvPos_srt' % cmpntName)
        cmds.parent(pvPos, pvCtrl)
        cmds.xform(pvPos, t=(0, 0, 0), ro=(0, 0, 0))
    else:
        pvPos = '%s_pvPos_srt' % cmpntName
    # Calculate distances
    chainLength = cmds.createNode('addDoubleLinear', n='%s_chainLength_fNode' % cmpntName)
    stretchDist = cmds.createNode('distanceBetween', n='%s_stretchDist_fNode' % cmpntName)
    thighToPvDist = cmds.createNode('distanceBetween', n='%s_thighToPvDist_fNode' % cmpntName)
    pvToAnkleDist = cmds.createNode('distanceBetween', n='%s_pvToAnkleDist_fNode' % cmpntName)
    cmds.setAttr('%s.input1' % chainLength, cmds.getAttr('%s.tx' % chain[1]), l=True)
    cmds.setAttr('%s.input2' % chainLength, cmds.getAttr('%s.tx' % chain[2]), l=True)
    cmds.connectAttr('%s.worldMatrix' % thighPos, '%s.inMatrix1' % stretchDist)
    cmds.connectAttr('%s.worldMatrix' % anklePos, '%s.inMatrix2' % stretchDist)
    cmds.connectAttr('%s.worldMatrix' % thighPos, '%s.inMatrix1' % thighToPvDist)
    cmds.connectAttr('%s.worldMatrix' % pvPos, '%s.inMatrix2' % thighToPvDist)
    cmds.connectAttr('%s.worldMatrix' % pvPos, '%s.inMatrix1' % pvToAnkleDist)
    cmds.connectAttr('%s.worldMatrix' % anklePos, '%s.inMatrix2' % pvToAnkleDist)
    # Create attributes
    cmds.addAttr(ikCtrlPath, ln='kneeSlide', at='double', min=-1, max=1, dv=0, k=True)
    cmds.addAttr(ikCtrlPath, ln='softIK', at='double', min=0, max=5, dv=0, k=True)
    cmds.addAttr(ikCtrlPath, ln='stretch', at='bool', k=True)
    cmds.addAttr(ikCtrlPath, ln='squash', at='bool', k=True)
    cmds.addAttr(ikCtrlPath, ln='clampStretch', at='bool', k=True)
    cmds.addAttr(ikCtrlPath, ln='clampValue', at='double', min=1, dv=1.5, k=True)
    cmds.addAttr(ikCtrlPath, ln='curStretchValue', at='double', dv=0)
    cmds.setAttr('%s.curStretchValue' % ikCtrlPath, e=True, cb=True)
    cmds.addAttr(ikCtrlPath, ln='thighStretchMult', at='double', min=0, dv=1, k=True)
    cmds.addAttr(ikCtrlPath, ln='thighSquashFBMult', nn='Thigh Squash FB Mult', at='double', min=0, dv=1, k=True)
    cmds.addAttr(ikCtrlPath, ln='thighSquashLRMult', nn='Thigh Squash LR Mult', at='double', min=0, dv=1, k=True)
    cmds.addAttr(ikCtrlPath, ln='shinStretchMult', at='double', min=0, dv=1, k=True)
    cmds.addAttr(ikCtrlPath, ln='shinSquashFBMult', nn='Shin Squash FB Mult', at='double', min=0, dv=1, k=True)
    cmds.addAttr(ikCtrlPath, ln='shinSquashLRMult', nn='Shin Squash LR Mult', at='double', min=0, dv=1, k=True)
    cmds.addAttr(pvCtrlPath, ln='pinKnee', at='double', min=0, max=1, dv=0, k=True)
    cmds.addAttr(pvCtrlPath, ln='pinKneeDist', at='double', k=True)
    # Create attributes and soft Dist curve
    cmds.addAttr(ikHdlePath, ln='dSoft', at='double', min=0.001, max=5, dv=0.001)
    cmds.setAttr('%s.dSoft' % ikHdlePath, e=True, cb=True)
    softCurve = cmds.createNode('remapValue', n='%s_softDistCurve_fNode' % cmpntName)
    cmds.connectAttr('%s.softIK' % ikCtrl, '%s.inputValue' % softCurve)
    cmds.setAttr('%s.inputMin' % softCurve, 0)
    cmds.setAttr('%s.inputMax' % softCurve, 5)
    cmds.setAttr('%s.outputMin' % softCurve, 0.001)
    cmds.setAttr('%s.outputMax' % softCurve, 5)
    cmds.connectAttr('%s.outValue' % softCurve, '%s.dSoft' % ikHdle)
    # Create Stretch nodes
    if translateBased == True:
        stretchTransConvert = cmds.createNode('multiplyDivide', n='%s_stretchTransConvert_fNode' % cmpntName)
    if not cmds.objExists('global_M_globalScale_fNode'):
        masterGlobalScale = cmds.createNode('floatMath', n='global_M_globalScale_fNode')
        char = ikCtrlPath.split('|')[1]
        child = '%s|globalTransform_hrc' % char
        if cmds.objExists(child):
            while child is not None:
                try:
                    child = cmds.listRelatives(child, c=True, type='transform', f=True)[0]
                except:
                	break
        try:
            wMatrix = cmds.listConnections(child, type='decomposeMatrix')[0]
        except TypeError as err:
            wMatrix = cmds.createNode('decomposeMatrix', n='global_M_masterCtrlWMatrix_fNode')
            cmds.connectAttr('%s.worldMatrix' % child, '%s.inputMatrix' % wMatrix)
        cmds.setAttr('%s.floatA' % masterGlobalScale, 1, l=True)
        cmds.setAttr('%s.operation' % masterGlobalScale, 3, l=True)
        cmds.connectAttr('%s.outputScaleY' % wMatrix, '%s.floatB' % masterGlobalScale)
    else:
        masterGlobalScale = 'global_M_globalScale_fNode'
    if not cmds.objExists('%s_stretchDistGlobalScaleDiv_fNode' % cmpntName):
        stretchDistGlobalScale = cmds.createNode('multDoubleLinear', n='%s_stretchDistGlobalScaleDiv_fNode' % cmpntName)
    else:
        stretchDistGlobalScale = '%s_stretchDistGlobalScaleDiv_fNode' % cmpntName
    softRatio = cmds.createNode('floatMath', n='%s_softRatio_fNode' % cmpntName)
    softStretchSwitch = cmds.createNode('floatCondition', n='%s_softStretchSwitch_fNode' % cmpntName)
    softDistPlusTranslation = cmds.createNode('addDoubleLinear', n='%s_softDistPlusTranslation_fNode' % cmpntName)
    clMinusDSoft = cmds.createNode('floatMath', n='%s_softChainLengthMinusDSoft_fNode' % cmpntName)
    stretchDistMinusSoftCl = cmds.createNode('floatMath', n='%s_softStretchDistMinusSoftCl_fNode' % cmpntName)
    negateSoftStretchDist = cmds.createNode('multDoubleLinear', n='%s_softNegateSoftStretchDist_fNode' % cmpntName)
    divByDSoft = cmds.createNode('floatMath', n='%s_softDivByDSoft_fNode' % cmpntName)
    powerE = cmds.createNode('floatMath', n='%s_softPowerE_fNode' % cmpntName)
    oneMinusPowerE = cmds.createNode('floatMath', n='%s_softOneMinusPowerE_fNode' % cmpntName)
    resPowerETimesDSoft = cmds.createNode('multDoubleLinear', n='%s_softResPowerETimesDSoft_fNode' % cmpntName)
    plusClMinusDSoft = cmds.createNode('addDoubleLinear', n='%s_softPlusChainLengthMinusDSoft_fNode' % cmpntName)
    softChainBend = cmds.createNode('condition', n='%s_softChainBend_fNode' % cmpntName)
    softDistDiff = cmds.createNode('floatMath', n='%s_softDistDiff_fNode' % cmpntName)
    softDistDefaultPos = cmds.createNode('floatMath', n='%s_softDistDefaultPos_fNode' % cmpntName)
    stretchMultSwitch = cmds.createNode('condition', n='%s_stretchMultSwitch_fNode' % cmpntName)
    stretchMult = cmds.createNode('multiplyDivide', n='%s_stretchMult_fNode' % cmpntName)
    clampStretchSwitch = cmds.createNode('floatCondition', n='%s_clampStretchSwitch_fNode' % cmpntName)
    clampStretch = cmds.createNode('clamp', n='%s_clampStretch_fNode' % cmpntName)
    thighSlide = cmds.createNode('floatMath', n='%s_thighSlide_fNode' % cmpntName)
    shinSlide = cmds.createNode('floatMath', n='%s_shinSlide_fNode' % cmpntName)
    slideClamp = cmds.createNode('clamp', n='%s_slideClamp_fNode' % cmpntName)
    stretchDiff = cmds.createNode('floatMath', n='%s_stretchDiff_fNode' % cmpntName)
    stretchSlide = cmds.createNode('floatMath', n='%s_stretchSlide_fNode' % cmpntName)
    stretchSlideMult = cmds.createNode('multiplyDivide', n='%s_stretchSlideMult_fNode' % cmpntName)
    squashSwitch = cmds.createNode('multDoubleLinear', n='%s_squashSwitch_fNode' % cmpntName)
    squashSqrt = cmds.createNode('floatMath', n='%s_squashSqrt_fNode' % cmpntName)
    squashInv = cmds.createNode('multiplyDivide', n='%s_squashInv_fNode' % cmpntName)
    thighSquashMultSwitch = cmds.createNode('condition', n='%s_thighSquashMultSwitch_fNode' % cmpntName)
    shinSquashMultSwitch = cmds.createNode('condition', n='%s_shinSquashMultSwitch_fNode' % cmpntName)
    thighSquashMult = cmds.createNode('multiplyDivide', n='%s_thighSquashMult_fNode' % cmpntName)
    shinSquashMult = cmds.createNode('multiplyDivide', n='%s_shinSquashMult_fNode' % cmpntName)
    pinKneeSwitch = cmds.createNode('blendColors', n='%s_pinKneeSwitch_fNode' % cmpntName)
    pinKnee = cmds.createNode('multiplyDivide', n='%s_pinKneeDiv_fNode' % cmpntName)
    pinKneeDist = cmds.createNode('multDoubleLinear', n='%s_pinKneeDist_fNode' % cmpntName)
    stretchAutoManualPvSwitch = cmds.createNode('condition', n='%s_stretchAutoManualPvSwitch_fNode' % cmpntName)
    cmds.setAttr('%s.operation' % softRatio, 3, l=True)
    cmds.setAttr('%s.operation' % clMinusDSoft, 1, l=True)
    cmds.setAttr('%s.operation' % stretchDistMinusSoftCl, 1, l=True)
    cmds.setAttr('%s.operation' % divByDSoft, 3, l=True)
    cmds.setAttr('%s.operation' % powerE, 6, l=True)
    cmds.setAttr('%s.operation' % oneMinusPowerE, 1, l=True)
    cmds.setAttr('%s.operation' % softChainBend, 5, l=True)
    cmds.setAttr('%s.operation' % softDistDiff, 1, l=True)
    cmds.setAttr('%s.operation' % softDistDefaultPos, 1, l=True)
    if upaxis.upper() == 'X' and defPos > 0: cmds.setAttr('%s.operation' % softDistDefaultPos, 0)
    elif upaxis.upper() == 'Z' and defPos < 0: cmds.setAttr('%s.operation' % softDistDefaultPos, 0)
    cmds.connectAttr('%s.distance' % stretchDist, '%s.input1' % stretchDistGlobalScale)
    cmds.connectAttr('%s.outFloat' % masterGlobalScale, '%s.input2' % stretchDistGlobalScale)
    cmds.connectAttr('%s.output' % chainLength, '%s.floatA' % clMinusDSoft)
    cmds.connectAttr('%s.dSoft' % ikHdle, '%s.floatB' % clMinusDSoft)
    cmds.connectAttr('%s.output' % stretchDistGlobalScale, '%s.floatA' % stretchDistMinusSoftCl) # Global Scale Stretch Dist
    cmds.connectAttr('%s.outFloat' % clMinusDSoft, '%s.floatB' % stretchDistMinusSoftCl)
    cmds.connectAttr('%s.outFloat' % stretchDistMinusSoftCl, '%s.input1' % negateSoftStretchDist)
    cmds.setAttr('%s.input2' % negateSoftStretchDist, -1, l=True)
    cmds.connectAttr('%s.output' % negateSoftStretchDist, '%s.floatA' % divByDSoft)
    cmds.connectAttr('%s.dSoft' % ikHdle, '%s.floatB' % divByDSoft)
    cmds.setAttr('%s.floatA' % powerE, math.exp(1), l=True)
    cmds.connectAttr('%s.outFloat' % divByDSoft, '%s.floatB' % powerE)
    cmds.setAttr('%s.floatA' % oneMinusPowerE, 1, l=True)
    cmds.connectAttr('%s.outFloat' % powerE, '%s.floatB' % oneMinusPowerE)
    cmds.connectAttr('%s.outFloat' % oneMinusPowerE, '%s.input1' % resPowerETimesDSoft)
    cmds.connectAttr('%s.dSoft' % ikHdle, '%s.input2' % resPowerETimesDSoft)
    cmds.connectAttr('%s.output' % resPowerETimesDSoft, '%s.input1' % plusClMinusDSoft)
    cmds.connectAttr('%s.outFloat' % clMinusDSoft, '%s.input2' % plusClMinusDSoft)
    cmds.connectAttr('%s.outFloat' % clMinusDSoft, '%s.firstTerm' % softChainBend)
    cmds.connectAttr('%s.output' % stretchDistGlobalScale, '%s.secondTerm' % softChainBend) # Global Scale Stretch Dist
    cmds.connectAttr('%s.output' % stretchDistGlobalScale, '%s.colorIfFalseR' % softChainBend) # Global Scale Stretch Dist
    cmds.connectAttr('%s.output' % plusClMinusDSoft, '%s.colorIfTrueR' % softChainBend)
    cmds.connectAttr('%s.outColorR' % softChainBend, '%s.floatA' % softDistDiff)
    cmds.connectAttr('%s.output' % stretchDistGlobalScale, '%s.floatB' % softDistDiff) # Global Scale Stretch Dist
    cmds.setAttr('%s.floatA' % softDistDefaultPos, 0, l=True)
    cmds.connectAttr('%s.outFloat' % softDistDiff, '%s.floatB' % softDistDefaultPos)
    cmds.connectAttr('%s.output' % stretchDistGlobalScale, '%s.floatA' % softRatio)
    cmds.connectAttr('%s.outColorR' % softChainBend, '%s.floatB' % softRatio)
    cmds.setAttr('%s.floatA' % softStretchSwitch, 0, l=True)
    cmds.connectAttr('%s.outFloat' % softDistDefaultPos, '%s.floatB' % softStretchSwitch)
    cmds.connectAttr('%s.stretch' % ikCtrl, '%s.condition' % softStretchSwitch)
    cmds.connectAttr('%s.ty' % ikCtrl, '%s.input1' % softDistPlusTranslation)
    cmds.connectAttr('%s.outFloat' % softStretchSwitch, '%s.input2' % softDistPlusTranslation)
    cmds.connectAttr('%s.output' % softDistPlusTranslation, '%s.t%s' % (ikHdlePivot, upaxis.lower()), f=True)
    cmds.setAttr('ikRPsolver.tolerance', 1e-07)
    # cmds.connectAttr('%s.output' % stretchDistGlobalScale, '%s.floatA' % stretchDiv)
    # cmds.connectAttr('%s.output' % chainLength, '%s.floatB' % stretchDiv)
    # cmds.setAttr('%s.operation' % stretchDiv, 3, l=True)
    # cmds.connectAttr('%s.outFloat' % stretchDiv, '%s.firstTerm' % stretchChainBend)
    # cmds.setAttr('%s.secondTerm' % stretchChainBend, 1, l=True)
    # cmds.setAttr('%s.operation' % stretchChainBend, 3, l=True)
    # cmds.setAttr('%s.colorIfFalseR' % stretchChainBend, 1, l=True)
    # cmds.connectAttr('%s.outFloat' % stretchDiv, '%s.colorIfTrueR' % stretchChainBend)
    cmds.connectAttr('%s.outFloat' % softRatio, '%s.inputR' % clampStretch)
    cmds.connectAttr('%s.clampValue' % ikCtrl, '%s.maxR' % clampStretch)
    cmds.connectAttr('%s.outputR' % clampStretch, '%s.floatA' % clampStretchSwitch)
    cmds.connectAttr('%s.outFloat' % softRatio, '%s.floatB' % clampStretchSwitch)
    cmds.connectAttr('%s.clampStretch' % ikCtrl, '%s.condition' % clampStretchSwitch)
    cmds.connectAttr('%s.stretch' % ikCtrl, '%s.firstTerm' % stretchMultSwitch)
    cmds.setAttr('%s.secondTerm' % stretchMultSwitch, 1, l=True)
    cmds.setAttr('%s.operation' % stretchMultSwitch, 0, l=True)
    cmds.connectAttr('%s.outFloat' % clampStretchSwitch, '%s.colorIfTrueR' % stretchMultSwitch) # '%s.outFloat' % clampStretchSwitch
    cmds.connectAttr('%s.thighStretchMult' % ikCtrl, '%s.colorIfTrueG' % stretchMultSwitch)
    cmds.connectAttr('%s.shinStretchMult' % ikCtrl, '%s.colorIfTrueB' % stretchMultSwitch)
    cmds.setAttr('%s.colorIfFalse' % stretchMultSwitch, 1, 1, 1, l=True)
    cmds.setAttr('%s.operation' % stretchMult, 1, l=True)
    cmds.connectAttr('%s.outColorG' % stretchMultSwitch, '%s.input1X' % stretchMult)
    cmds.connectAttr('%s.outColorB' % stretchMultSwitch, '%s.input1Y' % stretchMult)
    cmds.connectAttr('%s.outColorR' % stretchMultSwitch, '%s.input2X' % stretchMult)
    cmds.connectAttr('%s.outColorR' % stretchMultSwitch, '%s.input2Y' % stretchMult)
    cmds.connectAttr('%s.outColorR' % stretchMultSwitch, '%s.curStretchValue' % ikCtrl)
    cmds.connectAttr('%s.squash' % ikCtrl, '%s.input1' % squashSwitch)
    cmds.setAttr('%s.input2' % squashSwitch, 2, l=True)
    cmds.connectAttr('%s.outFloat' % clampStretchSwitch, '%s.floatA' % squashSqrt) # '%s.outFloat' % clampStretchSwitch
    cmds.setAttr('%s.floatB' % squashSqrt, 0.5, l=True)
    cmds.setAttr('%s.operation' % squashSqrt, 6, l=True)
    cmds.setAttr('%s.input1X' % squashInv, 1, l=True)
    cmds.connectAttr('%s.outFloat' % squashSqrt, '%s.input2X' % squashInv)
    cmds.connectAttr('%s.output' % squashSwitch, '%s.operation' % squashInv)
    cmds.connectAttr('%s.squash' % ikCtrl, '%s.firstTerm' % thighSquashMultSwitch)
    cmds.connectAttr('%s.squash' % ikCtrl, '%s.firstTerm' % shinSquashMultSwitch)
    cmds.setAttr('%s.secondTerm' % thighSquashMultSwitch, 1, l=True)
    cmds.setAttr('%s.secondTerm' % shinSquashMultSwitch, 1, l=True)
    cmds.setAttr('%s.operation' % thighSquashMultSwitch, 0, l=True)
    cmds.setAttr('%s.operation' % shinSquashMultSwitch, 0, l=True)
    cmds.connectAttr('%s.outputX' % squashInv, '%s.colorIfTrueR' % thighSquashMultSwitch)
    cmds.connectAttr('%s.thighSquashFBMult' % ikCtrl, '%s.colorIfTrueG' % thighSquashMultSwitch)
    cmds.connectAttr('%s.thighSquashLRMult' % ikCtrl, '%s.colorIfTrueB' % thighSquashMultSwitch)
    cmds.connectAttr('%s.outputX' % squashInv, '%s.colorIfTrueR' % shinSquashMultSwitch)
    cmds.connectAttr('%s.shinSquashFBMult' % ikCtrl, '%s.colorIfTrueG' % shinSquashMultSwitch)
    cmds.connectAttr('%s.shinSquashLRMult' % ikCtrl, '%s.colorIfTrueB' % shinSquashMultSwitch)
    cmds.setAttr('%s.colorIfFalse' % thighSquashMultSwitch, 1, 1, 1, l=True)
    cmds.setAttr('%s.colorIfFalse' % shinSquashMultSwitch, 1, 1, 1, l=True)
    cmds.setAttr('%s.operation' % thighSquashMult, 1, l=True)
    cmds.setAttr('%s.operation' % shinSquashMult, 1, l=True)
    cmds.connectAttr('%s.outColorG' % thighSquashMultSwitch, '%s.input1X' % thighSquashMult)
    cmds.connectAttr('%s.outColorB' % thighSquashMultSwitch, '%s.input1Y' % thighSquashMult)
    cmds.connectAttr('%s.outColorR' % thighSquashMultSwitch, '%s.input2X' % thighSquashMult)
    cmds.connectAttr('%s.outColorR' % thighSquashMultSwitch, '%s.input2Y' % thighSquashMult)
    cmds.connectAttr('%s.outColorG' % shinSquashMultSwitch, '%s.input1X' % shinSquashMult)
    cmds.connectAttr('%s.outColorB' % shinSquashMultSwitch, '%s.input1Y' % shinSquashMult)
    cmds.connectAttr('%s.outColorR' % shinSquashMultSwitch, '%s.input2X' % shinSquashMult)
    cmds.connectAttr('%s.outColorR' % shinSquashMultSwitch, '%s.input2Y' % shinSquashMult)
    cmds.setAttr('%s.input1' % pinKneeDist, -1, l=True)
    cmds.connectAttr('%s.pinKneeDist' % pvCtrl, '%s.input2' % pinKneeDist)
    cmds.connectAttr('%s.output' % pinKneeDist, '%s.tx' % pvPos)
    cmds.setAttr('%s.operation' % pinKnee, 2, l=True)
    cmds.connectAttr('%s.distance' % thighToPvDist, '%s.input1X' % pinKnee)
    cmds.connectAttr('%s.distance' % pvToAnkleDist, '%s.input1Y' % pinKnee)
    cmds.connectAttr('%s.input1' % chainLength, '%s.input2X' % pinKnee)
    cmds.connectAttr('%s.input2' % chainLength, '%s.input2Y' % pinKnee)
    cmds.connectAttr('%s.pinKnee' % pvCtrl, '%s.blender' % pinKneeSwitch)
    cmds.connectAttr('%s.outputX' % pinKnee, '%s.color1R' % pinKneeSwitch)
    cmds.connectAttr('%s.outputY' % pinKnee, '%s.color1G' % pinKneeSwitch)
    cmds.connectAttr('%s.outFloat' % clampStretchSwitch, '%s.color2R' % pinKneeSwitch)
    cmds.connectAttr('%s.outFloat' % clampStretchSwitch, '%s.color2G' % pinKneeSwitch)
    cmds.connectAttr('%s.autoManualPv' % ikCtrl, '%s.firstTerm' % stretchAutoManualPvSwitch)
    cmds.setAttr('%s.secondTerm' % stretchAutoManualPvSwitch, 0, l=True)
    cmds.setAttr('%s.operation' % stretchAutoManualPvSwitch, 0, l=True)
    cmds.connectAttr('%s.outputX' % stretchMult, '%s.colorIfTrueR' % stretchAutoManualPvSwitch)
    cmds.connectAttr('%s.outputY' % stretchMult, '%s.colorIfTrueG' % stretchAutoManualPvSwitch)
    cmds.connectAttr('%s.outputR' % pinKneeSwitch, '%s.colorIfFalseR' % stretchAutoManualPvSwitch)
    cmds.connectAttr('%s.outputG' % pinKneeSwitch, '%s.colorIfFalseG' % stretchAutoManualPvSwitch)
    cmds.connectAttr('%s.outputX' % stretchMult, '%s.floatA' % thighSlide)
    cmds.connectAttr('%s.outputY' % stretchMult, '%s.floatA' % shinSlide)
    cmds.connectAttr('%s.kneeSlide' % ikCtrl, '%s.floatB' % thighSlide)
    cmds.connectAttr('%s.kneeSlide' % ikCtrl, '%s.floatB' % shinSlide)
    cmds.setAttr('%s.operation' % thighSlide, 0, l=True)
    cmds.setAttr('%s.operation' % shinSlide, 1, l=True)
    cmds.connectAttr('%s.outFloat' % thighSlide, '%s.inputR' % slideClamp)
    cmds.connectAttr('%s.outFloat' % shinSlide, '%s.inputG' % slideClamp)
    cmds.setAttr('%s.minR' % slideClamp, 0.05, l=True)
    cmds.setAttr('%s.minG' % slideClamp, 0.05, l=True)
    cmds.setAttr('%s.maxR' % slideClamp, 1.95, l=True)
    cmds.setAttr('%s.maxG' % slideClamp, 1.95, l=True)
    cmds.connectAttr('%s.outputX' % stretchSlideMult, '%s.color2R' % pinKneeSwitch, f=True)
    cmds.connectAttr('%s.outputY' % stretchSlideMult, '%s.color2G' % pinKneeSwitch, f=True)
    cmds.connectAttr('%s.outputR' % slideClamp, '%s.colorIfTrueR' % stretchAutoManualPvSwitch, f=True)
    cmds.connectAttr('%s.outputG' % slideClamp, '%s.colorIfTrueG' % stretchAutoManualPvSwitch, f=True)
    cmds.connectAttr('%s.outFloat' % clampStretchSwitch, '%s.floatA' % stretchDiff) # '%s.outFloat' % clampStretchSwitch
    cmds.setAttr('%s.floatB' % stretchDiff, 1, l=True)
    cmds.setAttr('%s.operation' % stretchDiff, 1, l=True)
    cmds.connectAttr('%s.outFloat' % clampStretchSwitch, '%s.floatA' % stretchSlide) # '%s.outFloat' % clampStretchSwitch
    cmds.connectAttr('%s.outFloat' % stretchDiff, '%s.floatB' % stretchSlide)
    cmds.setAttr('%s.operation' % stretchSlide, 1, l=True)
    cmds.connectAttr('%s.outFloat' % stretchSlide, '%s.floatA' % thighSlide, f=True)
    cmds.connectAttr('%s.outFloat' % stretchSlide, '%s.floatA' % shinSlide, f=True)
    cmds.connectAttr('%s.outputX' % stretchMult, '%s.input1X' % stretchSlideMult)
    cmds.connectAttr('%s.outputY' % stretchMult, '%s.input1Y' % stretchSlideMult)
    cmds.connectAttr('%s.outputR' % slideClamp, '%s.input2X' % stretchSlideMult)
    cmds.connectAttr('%s.outputG' % slideClamp, '%s.input2Y' % stretchSlideMult)
    cmds.setAttr('%s.operation' % stretchSlideMult, 1, l=True)
    cmds.connectAttr('%s.outputX' % stretchSlideMult, '%s.colorIfTrueR' % stretchAutoManualPvSwitch, f=True)
    cmds.connectAttr('%s.outputY' % stretchSlideMult, '%s.colorIfTrueG' % stretchAutoManualPvSwitch, f=True)
    if translateBased == True:
        cmds.connectAttr('%s.input1' % chainLength, '%s.input1X' % stretchTransConvert)
        cmds.connectAttr('%s.input2' % chainLength, '%s.input1Y' % stretchTransConvert)
        cmds.connectAttr('%s.outColorR' % stretchAutoManualPvSwitch, '%s.input2X' % stretchTransConvert)
        cmds.connectAttr('%s.outColorG' % stretchAutoManualPvSwitch, '%s.input2Y' % stretchTransConvert)
        cmds.connectAttr('%s.outputX' % stretchTransConvert, '%s.tx' % chain[1])
        cmds.connectAttr('%s.outputY' % stretchTransConvert, '%s.tx' % chain[2])
    else:
        cmds.connectAttr('%s.outColorR' % stretchAutoManualPvSwitch, '%s.sx' % chain[0])
        cmds.connectAttr('%s.outColorG' % stretchAutoManualPvSwitch, '%s.sx' % chain[1])
    cmds.connectAttr('%s.outputX' % thighSquashMult, '%s.sy' % chain[0])
    cmds.connectAttr('%s.outputY' % thighSquashMult, '%s.sz' % chain[0])
    cmds.connectAttr('%s.outputX' % shinSquashMult, '%s.sy' % chain[1])
    cmds.connectAttr('%s.outputY' % shinSquashMult, '%s.sz' % chain[1])
