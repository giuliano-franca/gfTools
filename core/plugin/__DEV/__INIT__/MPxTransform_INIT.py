# -*- coding: utf-8 -*-
"""
Copyright (c) 2019 Giuliano Fran√ßa

Maya IDs:
    Prototypes: 0x0012f7c0 - 0x0012f7ff
    Releases: 0x00130d80 - 0x00130e7f

Redistribution:
    Something here.

Maya Node:
    [This is a prototype version of the gfTestTransform node. You should be using the related C++ version.]
    This node is a test node and only performs test operations with one input value.

How to use:
    * Copy and paste this file to a Maya plugins path, default: "C:/Users/<user>/Documents/maya/<version>/plug-ins".
        You can create a "plug-ins" folder if not exists.
    * Open your Maya (same version).
    * Go to Windows > Settings/Preferences > Plug-in Manager.
    * Mark this file as loaded.

Requirements:
    Maya 2017 or above.

Todo:
    * Binormal = Z Axis generated by cross product X and Y Axis.

This code supports Pylint. Rc file in project.
"""
# pylint: disable=import-error
# import-error = Supress Maya modules import error

import sys
import maya.OpenMaya as om1
import maya.OpenMayaMPx as ompx


def INPUT_ATTR(FNATTR):
    """ Configure a input attribute. """
    # pylint: disable=invalid-name
    FNATTR.setWritable(True)
    FNATTR.setReadable(True)
    FNATTR.setStorable(True)
    FNATTR.setKeyable(True)
    FNATTR.setAffectsWorldSpace(True)


def OUTPUT_ATTR(FNATTR):
    """ Configure a output attribute. """
    # pylint: disable=invalid-name
    FNATTR.setWritable(False)
    FNATTR.setReadable(True)
    FNATTR.setStorable(False)
    FNATTR.setKeyable(False)


class TestTransformMatrix(ompx.MPxTransformationMatrix):
    """ Main class of gfTestTransformMatrix. """
    kMATRIX_ID = om1.MTypeId(0x0012f7c5)

    def __init__(self):
        """ Constructor. """
        ompx.MPxTransformationMatrix.__init__(self)

    @staticmethod
    def creator():
        """ Maya creator function. """
        return ompx.asMPxPtr(TestTransformMatrix())

    def asMatrix(self, percent=None):
        """ Find the new object matrix and returns it. """
        # pylint: disable=no-self-use
        if percent is None:
            return ompx.MPxTransformationMatrix.asMatrix(self)
        else:
            return ompx.MPxTransformationMatrix.asMatrix(self)


class TestTransform(ompx.MPxTransform):
    """ Main class of gfTestTransform node. """

    kNODE_NAME = "gfTestTransform"
    kNODE_CLASSIFY = "drawdb/transform"
    kNODE_ID = om1.MTypeId(0x0012f7c6)

    inMtx1 = om1.MObject()

    def __init__(self, transform=None):
        """ Constructor. """
        if transform is None:
            ompx.MPxTransform.__init__(self)
        else:
            ompx.MPxTransform.__init__(self, transform)

    @staticmethod
    def creator():
        """ Maya creator function. """
        return ompx.asMPxPtr(TestTransform())

    def createTransformationMatrix(self):
        """ Point the result MPxTransformationMatrix. """
        # pylint: disable=no-self-use
        return ompx.asMPxPtr(TestTransformMatrix())

    @staticmethod
    def initialize():
        """
        Defines the set of attributes for this node. The attributes declared in this function are assigned
        as static members to TestTransform class. Instances of TestTransform will use these attributes to create plugs
        for use in the compute() method.
        """
        mAttr = om1.MFnMatrixAttribute()

        TestTransform.inMtx1 = mAttr.create(
            "test", "tst", om1.MFnMatrixAttribute.kDouble)
        INPUT_ATTR(mAttr)

        TestTransform.addAttribute(TestTransform.inMtx1)
        TestTransform.mustCallValidateAndSet(TestTransform.inMtx1)
        return True

    def compute(self, plug, dataBlock):
        """
        Node computation method:
            * plug is a connection point related to one of our node attributes (either an input or an output).
            * dataBlock contains the data on which we will base our computations.
        """
        # pylint: disable=no-self-use
        return True

    def validateAndSetValue(self, plug, handle, context):
        """
        Method to validate attributes for MPxTransformationMatrix.
        This method will only be called by mustCallValidateAndSet setted attributes.
        """
        outputMatrix = self.transformationMatrixPtr()  # returns the associated transformation matrix (TestTransformMatrix)
        dataBlock = self.forceCache()
        return True


def initializePlugin(mobject):
    """ Initializes the plug-in. """
    mplugin = ompx.MFnPlugin(mobject)
    try:
        mplugin.registerTransform(TestTransform.kNODE_NAME, TestTransform.kNODE_ID, TestTransform.creator,
                                  TestTransform.initialize, TestTransformMatrix.creator, TestTransformMatrix.kMATRIX_ID,
                                  TestTransform.kNODE_CLASSIFY)
    except:
        sys.stderr.write("Failed to register node: " +
                         TestTransform.kNODE_NAME)
        raise


def uninitializePlugin(mobject):
    """ Unitializes the plug-in. """
    mplugin = ompx.MFnPlugin(mobject)
    try:
        mplugin.deregisterNode(TestTransform.kNODE_ID)
    except:
        sys.stderr.write("Failed to deregister node: " +
                         TestTransform.kNODE_NAME)
        raise
